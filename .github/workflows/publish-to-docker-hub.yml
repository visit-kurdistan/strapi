name: Build and Push Docker Image on Main

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Step 3: Cache Yarn dependencies
      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        with:
          path: ~/.yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: yarn install --production --network-timeout=600000

      # Step 5: Build the Strapi application
      - name: Build the Strapi application
        run: yarn build

      # Step 6: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 7: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Step 8: Build and push Docker image
      - name: Build and push Docker image
        id: build_image
        run: |
          VERSION=$(jq -r .version < package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          IMAGE_NAME=vk-strapi
          docker buildx build \
            --platform linux/amd64 \
            --build-arg HOST=${{ secrets.PROD_STRAPI_HOST }} \
            --build-arg PORT=${{ secrets.PROD_STRAPI_PORT }} \
            --build-arg APP_KEYS=${{ secrets.PROD_STRAPI_APP_KEYS }} \
            --build-arg API_TOKEN_SALT=${{ secrets.PROD_STRAPI_API_TOKEN_SALT }} \
            --build-arg ADMIN_JWT_SECRET=${{ secrets.PROD_STRAPI_ADMIN_JWT_SECRET }} \
            --build-arg TRANSFER_TOKEN_SALT=${{ secrets.PROD_STRAPI_TRANSFER_TOKEN_SALT }} \
            --build-arg DATABASE_CLIENT=${{ secrets.PROD_STRAPI_DATABASE_CLIENT }} \
            --build-arg DATABASE_HOST=${{ secrets.PROD_STRAPI_DATABASE_HOST }} \
            --build-arg DATABASE_PORT=${{ secrets.PROD_STRAPI_DATABASE_PORT }} \
            --build-arg DATABASE_NAME=${{ secrets.PROD_STRAPI_DATABASE_NAME }} \
            --build-arg DATABASE_USERNAME=${{ secrets.PROD_STRAPI_DATABASE_USERNAME }} \
            --build-arg DATABASE_PASSWORD=${{ secrets.PROD_STRAPI_DATABASE_PASSWORD }} \
            --build-arg DATABASE_SSL=${{ secrets.PROD_STRAPI_DATABASE_SSL }} \
            --build-arg JWT_SECRET=${{ secrets.PROD_STRAPI_JWT_SECRET }} \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/$IMAGE_NAME:$VERSION \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/$IMAGE_NAME:latest \
            --push .

      # Step 9: Cleanup
      - name: Cleanup unused Docker resources
        run: docker system prune -f
